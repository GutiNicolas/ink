type Query {
    papers: [Paper!]
    getPaper(id: String!) : Paper!

    # Users
    getUser(id: String, email: String): User!
    validateSession(token: String): LoginResponse!
    deletePlaceHolder(id: String): PlaceHolderResponse
}

type Mutation {
    # Papers Related Mutations
    publishPaper(title: String!, creator: String!, body: String!, description: String!) : Paper!
    deletePaper(id: ID!) : Boolean
    updatePaper(id:ID!, title: String, body: String, description: String) : Paper!

    # Interactions Related Mutations
    likePaper(paperId: ID!, userId: String!) : Boolean
    unLikePaper(paperId: ID!, userId: String!) : Boolean
    commentPaper(paperId: ID!, userId: String!, content: String!) : Review!
    deleteComment(commentId: ID!, userId: String!) : Boolean
    replyComment(originalComment: ID!, userId: String!, content: String!): Review!

    # Users
    login(email: String, provider: Provider!, verifiedByProvider: Boolean = false, token: String): LoginResponse
    registrationPlaceHolder(email: String!, idToken: String!, firstName: String, lastName: String, provider: Provider): PlaceHolderResponse
    register(email: String!, firstName: String, lastName: String, username: String!, blogName: String!, blogDescription: String!): User!
}

type Paper {
    id: ID!
    title: String!
    creator: String!
    body: String!
    description: String!
    publishedDate: String
    interaction: Interaction
}

type Interaction {
    id: ID!
    likes: [Like!]
    reviews: [Review!]
}

type Review {
    id: ID!
    userId: String
    content: String!
    publishedDate: String
    deletionDate: String
    replies: [Review!]
}

type Like {
    id: ID!
    likedDate: String
    userId: String!
}